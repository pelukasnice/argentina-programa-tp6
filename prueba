<?php

class Persona {
    protected $nombre;
    protected $fecha_nacimiento;
    protected $direccion;
    protected $sexo;
  
    public function __construct($nombre, $fecha_nacimiento, $direccion, $sexo) {
      $this->nombre = $nombre;
      $this->fecha_nacimiento = $fecha_nacimiento;
      $this->direccion = $direccion;
      $this->sexo = $sexo;
    }
  }
  
  class Postulante extends Persona {
    public function calcularEdad() {
      $fecha_actual = new DateTime();
      $fecha_nacimiento = new DateTime($this->fecha_nacimiento);
      $diferencia = $fecha_actual->diff($fecha_nacimiento);
      return $diferencia->y;
    }
    public function imprimirObjeto() {
      $html = "<h2>Datos del Postulante</h2>";
      $html .= "<p>Nombre: $this->nombre</p>";
      $html .= "<p>Fecha de Nacimiento: $this->fecha_nacimiento</p>";
      $html .= "<p>Dirección: $this->direccion</p>";
      $html .= "<p>Sexo: $this->sexo</p>";
      $html .= "<p>Edad: " . $this->calcularEdad() . "</p>";
      return $html;
    }
  }
  
  class Empleado extends Persona {
    protected $disponibilidad;
    protected $puesto;
    protected $fecha_ingreso;
  
    public function __construct($nombre, $fecha_nacimiento, $direccion, $sexo, $disponibilidad, $puesto, $fecha_ingreso) {
      parent::__construct($nombre, $fecha_nacimiento, $direccion, $sexo);
      $this->disponibilidad = $disponibilidad;
      $this->puesto = $puesto;
      $this->fecha_ingreso = $fecha_ingreso;
    }
  
    public function calcularAntiguedad() {
      $fecha_actual = new DateTime();
      $fecha_ingreso = new DateTime($this->fecha_ingreso);
      $diferencia = $fecha_actual->diff($fecha_ingreso);
      return $diferencia->y;
    }
  
    public static function mostrarPuestos() {
      $puestos = ['Informática', 'Contable', 'RRHH'];
      foreach ($puestos as $puesto) {
        echo $puesto . "<br>";
      }
    }
    public function imprimirObjeto() {
      $html = "<h2>Datos del Empleado</h2>";
      $html .= "<p>Nombre: $this->nombre</p>";
      $html .= "<p>Fecha de Nacimiento: $this->fecha_nacimiento</p>";
      $html .= "<p>Dirección: $this->direccion</p>";
      $html .= "<p>Sexo: $this->sexo</p>";
      $html .= "<p>Disponibilidad: $this->disponibilidad</p>";
      $html .= "<p>Puesto: $this->puesto</p>";
      $html .= "<p>Antigüedad: " . $this->calcularAntiguedad() . " años</p>";
      return $html;
    }
  }
  
  class EmpleadoInformatico extends Empleado {
    private $cantidadAplicaciones;
    private $basico = 200000;
  
    public function __construct($nombre, $cantidadAplicaciones) {
      parent::__construct($nombre, null, null, null, null, null, null);
      $this->cantidadAplicaciones = $cantidadAplicaciones;
    }
  
    public function calcularSueldo() {
      if ($this->cantidadAplicaciones >= 1 && $this->cantidadAplicaciones <= 5) {
        $sueldo = $this->basico + 10000;
      } elseif ($this->cantidadAplicaciones >= 6) {
        $sueldo = $this->basico + 20000;
      } else {
        $sueldo = $this->basico;
      }
  
      return $sueldo;
    }
  }
  
  class EmpleadoRRHH extends Empleado {
    private $cantidadProyectos;
    private $basico = 300000;
  
    public function __construct($nombre, $cantidadProyectos) {
      parent::__construct($nombre, null, null, null, null, null, null);
      $this->cantidadProyectos = $cantidadProyectos;
    }
  
    public function calcularSueldo() {
      if ($this->cantidadProyectos >= 1 && $this->cantidadProyectos <= 5) {
        $sueldo = $this->basico + 20000;
      } elseif ($this->cantidadProyectos >= 6) {
        $sueldo = $this->basico + 30000;
      } else {
        $sueldo = $this->basico;
      }
  
      return $sueldo;
    }
  }
  
  class EmpleadoContable extends Empleado {
    private $cantidadExpedientes;
    private $basico = 100000;
  
    public function __construct($nombre, $cantidadExpedientes) {
      parent::__construct($nombre, null, null, null, null, null, null);
      $this->cantidadExpedientes = $cantidadExpedientes;
    }
  
    public function calcularSueldo() {
      if ($this->cantidadExpedientes >= 1 && $this->cantidadExpedientes <= 5) {
        $sueldo = $this->basico + 50000;
      } elseif ($this->cantidadExpedientes >= 6) {
        $sueldo = $this->basico + 80000;
      } else {
        $sueldo = $this->basico;
      }
  
      return $sueldo;
    }
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $nombre = $_POST['nombre'];
  $fecha_nacimiento = $_POST['fecha_nacimiento'];
  $direccion = $_POST['direccion'];
  $sexo = $_POST['sexo'];
  $disponibilidad = $_POST['disponibilidad'];
  $puesto = $_POST['puesto'];
  $fecha_ingreso = $_POST['ingreso'];

  // Verifica si es un empleado o un postulante
  if (isset($_POST['disponibilidad']) && isset($_POST['puesto'])) {
    // Es un empleado
    $empleado = new Empleado($nombre, $fecha_nacimiento, $direccion, $sexo, $disponibilidad, $puesto, $fecha_ingreso);

    // Imprimir detalles del empleado
    echo "<div class='persona_container card'>";
    echo $empleado->imprimirObjeto();
    echo "</div>";
  } else {
    // Es un postulante
    $postulante = new Postulante($nombre, $fecha_nacimiento, $direccion, $sexo);

    // Imprimir detalles del postulante
    echo "<div class='persona_container card'>";
    echo $postulante->imprimirObjeto();
    echo "</div>";
  }
// Verificar si se ha enviado el formulario
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  // Obtener los valores ingresados
  $clase = $_POST['clase'];
  $cantidad = $_POST['cantidad'];

  
  // Crear una instancia del empleado correspondiente según la clase seleccionada
  $empleado = null;
  switch ($clase) {
    case 'informatico':
      $empleado = new EmpleadoInformatico("Nombre del Empleado", $cantidad);
      break;
    case 'rrhh':
      $empleado = new EmpleadoRRHH("Nombre del Empleado", $cantidad);
      break;
    case 'contable':
      $empleado = new EmpleadoContable("Nombre del Empleado", $cantidad);
      break;
    default:
      // Clase de empleado no válida
      echo "Clase de empleado no válida";
      exit;
  }
 
}
}
$sueldo = $empleado->calcularSueldo();

  // Mostrar el resultado
  echo "El sueldo del empleado es: " . $sueldo;
 /* // Crear un empleado informático con 10 aplicaciones
  $empleadoInformatico = new EmpleadoInformatico("Nombre del empleado", 10);
  
  // Calcular y mostrar el sueldo del empleado informático
  echo "Sueldo del empleado informático: $" . $empleadoInformatico->calcularSueldo();*/
  ?>